{"version":3,"sources":["webpack:///./wiki/TcLs2Branching.mdx"],"names":["name","_frontmatter","Link","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","to","parentName","isMDXComponent"],"mappings":"2eAMO,IAEeA,EAFTC,EAAe,GAOtBC,GALgBF,EAKK,OALG,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,E,oIACF,mBACD,OAAO,YAACI,EAAD,KAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,yEAAwD,YAACT,EAAD,CAAMU,GAAG,SAASD,QAAQ,QAA1B,WAAxD,aACA,gNAIA,qKAEA,8DACA,kBAAS,CACP,UAAa,mBACb,gBAAiB,QAChB,qBAAKE,WAAW,OAAU,CACzB,UAAa,kBACZ,sBAAMA,WAAW,OAAU,CAC1B,UAAa,kBADd,kKAQL,oCACA,sKAEF,sBAAMA,WAAW,KAAQ,CACnB,UAAa,kBADnB,0CAFE,KAKA,8LAGA,uHAEA,0CACA,qJAGA,4KAGA,kIACoD,sBAAMA,WAAW,KAAQ,CACzE,UAAa,kBADmC,8BADpD,gEAKA,0QAKA,8HAEA,oCACA,4HACA,yKAGA,+IAEA,iOAGA,yDAKJJ,EAAWK,gBAAiB","file":"component---wiki-tc-ls-2-branching-mdx-62450f4172d8839c545b.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Volumes/Projects/drpicox/gatsby-home/src/layouts/WikiLayout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`This article covers how to create branchs in the `}<Link to=\"/TcLs2\" mdxType=\"Link\">[TcLs2]</Link>{` project.`}</p>\n    <p>{`When many people are collaborating on the same project,\nwe need a way to cooperate and avoid conflicts.\nIn repositories like Git, we need a strategy\nto work with everyone together.`}</p>\n    <p>{`In this assignment, we use a development based on the root branch (called master),\nbut all changes are committed to other feature branches.`}</p>\n    <p>{`This is the overview of the branches:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"text\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-text\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-text\"\n        }}>{`  master\no------------------------[]----···\n \\\\                       / PR\n  \\\\                     /\n   \\\\ feature/10_title  /\n    ---o---o----o------`}</code></pre></div>\n    <h2>{`New branch`}</h2>\n    <p>{`You have to create a branch when you start to develop one issue.\nCreate it always from the master. The branch name must follow this naming:\n`}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`feature/\\${issue_number}_\\${issue_title}`}</code>{`.`}</p>\n    <p>{`Work and frequently commit to that branch.\nBecause each one of you is working on a single issue,\nthere should be no new commits from other authors in that branch. `}</p>\n    <p>{`Push the branch regularly to the GitHub repository.\nIt would make a good backup of your work.`}</p>\n    <h2>{`PR: Pull Request`}</h2>\n    <p>{`Once you have finished implementing your issue,\nmake sure that you have committed everything,\npush your branch to GitHub. `}</p>\n    <p>{`Enter into your project in GitHub,\npush the button to create a new Pull Request.\nThe Pull Request is from your branch towards the master branch. `}</p>\n    <p>{`Create the Pull Request and write the description.\nThe description text must contain the following text: `}<code parentName=\"p\" {...{\n        \"className\": \"language-text\"\n      }}>{`Implements #\\${issue_numer}`}</code>{`.\nExample: \"Implements #10\". You also can add some details.`}</p>\n    <p>{`Review your commit, look to your changes.\nIf you find anything that you want to improve or fix,\ndo it, commit it, and push again.\nThe Pull Request will reflect all changes.\nWhen it looks good, mode your Issue card in the Board to Review.`}</p>\n    <p>{`Before the daily,\nreview all of your Pull Requests and resolve all the comments that you might have.`}</p>\n    <h2>{`Conflicts!`}</h2>\n    <p>{`Conflicts appear when someone else merges a code that changes the same parts that you have changed.`}</p>\n    <p>{`If your Pull Request conflicts with the master branch,\nyou must solve it.\nGitHub will report that and will prevent the Pull Request to finish.`}</p>\n    <p>{`Go to your code, open the repository,\nfetch all new commits. Be sure that you bring the changes to the master branch.`}</p>\n    <p>{`Merge the branch master —with the changes— to your branch,\nsolve the conflicts, and push it again to GitHub.\nIf you did it ok, the conflict message of GitHub would disappear from the Pull Request.  `}</p>\n    <p>{`Notify it to your team members.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}