{"version":3,"sources":["webpack:///./blog/2018-02-09-why-you-should-start-writing-tests-as-they-were-documentation.mdx","webpack:///./src/layouts/PostLayout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","WikiPage","children","pageContext","canonical","frontmatter","shared","title","class","href","target","rel"],"mappings":"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","file":"component---blog-2018-02-09-why-you-should-start-writing-tests-as-they-were-documentation-mdx-fd9b377d83216824f9bf.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Volumes/Projects/drpicox/gatsby-home/src/layouts/PostLayout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`It is great to suggest people write tests.\nIt is indeed a good idea, but it is not enough.`}</p>\n    <p>{`Writing tests is hard.\nNot because it is difficult, but because of people.\nPeople think that tests are pointless and consequently a waste of time.`}</p>\n    <p>{`There are terrible testing practices, many of them harmful.\nWorst practices occur when coders are forced to write tests\n(big companies, test-obsessed coders, quality policies).\nMany of them resulting from these practices are almost useless.\nThey are just copies of production code or very rigid tests.\nThese tests lack many of the expected properties of a test.`}</p>\n    <p>{`What should we expect from testing?`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`«But: program testing can be a very effective way\nto show the presence of bugs,\nbut is hopelessly inadequate for\nshowing their absence.»`}</p>\n      <p parentName=\"blockquote\">{`— Edsger W. Dijkstra, 1972`}</p>\n    </blockquote>\n    <p>{`Tests objective is not creating a bugs free system.\nIt is an impossible task.\nTests cannot effectively achieve that.\nHowever, there are many other objectives which are valuable.`}</p>\n    <h3>{`Main tests objective is to make legacy code disappear.`}</h3>\n    <p>{`Legacy code is any old unsupported code.\nMoreover, it is any code difficult to change\nbecause changing it may break our system.\nIt is that code that is too complex or too slow to update.\nIt is that code that anyone is afraid to change.`}</p>\n    <p>{`The legacy code appears when we want to change or add some code,\nbut we cannot guarantee to do not break any functionality.\nIt can be because:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`There are no tests for such functionality.`}</li>\n      <li parentName=\"ol\">{`We need to alter many tests significantly.`}</li>\n      <li parentName=\"ol\">{`We do not know all supported functionalities.`}</li>\n    </ol>\n    <p>{`The first and second scenarios are the classic ones that we consider: there are lots of functionalities, and we do not have time to check each functionality manually. Adding more tests can solve these scenarios, but it is not that simple: tests are usually unit tests designed to check a set of functions —functions instead of functionalities— . Coders become obsessed in test every function, one by one, all possible cases, all input combinations, all ranges. They try to get the 100% code coverage regardless of its usefulness. All this effort reaches one single conclusion: rigid codes poorly covered.`}</p>\n    <p>{`The third scenario has a subtle difference: we cannot ensure all functionalities because we do not know which are the expected functionalities. This third scenario happens more often than we usually consider. Proper documentation would solve this scenario, but it has a handicap: documentation does not evolve with the code. Eventually, inevitably, documentation and code differ making the documentation obsolete.`}</p>\n    <p>{`Here good news comes. There is a simple trick to solve these two scenarios and avoid legacy code: “`}<strong parentName=\"p\">{`testing is documentation`}</strong>{`.”`}</p>\n    <p>{`Let’s assume that tests are the documentation. As documentation they explain all the expected functionalities —functionalities instead of functions— , they describe what the code does, and they describe what we expect from them. We can understand and learn from it. As tests, they do not become obsolete. If something changes, tests fail, and update must happen.`}</p>\n    <h3>{`An event listener testing example.`}</h3>\n    <p>{`Imagine that we want to implement an event listener. Also, imagine that we make some tests that cover 100% of the code:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"javascript\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-javascript\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-javascript\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`describe`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'addListener'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`it`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'should add a callback to the queue'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n    dispatcher`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`addListener`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`cb`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`expect`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`dispatcher`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`_queue`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`toContain`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`cb`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n\n`}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`describe`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'deliver'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`it`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'should invoke queue callbacks with the received argument'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` \n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n      dispatcher`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span>{`_queue`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`push`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`cb`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n      dispatcher`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`deliver`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'message'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n      `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`expect`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`cb`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`toHaveBeenCalledWith`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'message'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n    `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span></code></pre></div>\n    <p>{`These tests achieve 100% of code coverage, and at the same time, it is almost a useless testing code. Moreover, suppressing expectations in both tests, or replacing them by checking anything else —like checking that both methods return undefined— , they still achieve 100% of code coverage.`}</p>\n    <p>{`These tests are checking something called “dispatcher.” Tests tell almost nothing about the purpose of the dispatcher. They are small pieces put apart and no explanation for how they work together. There is no whole picture. Adding more tests —cases like explaining what happens if the queue is empty— , do not provide for more insights about what dispatcher does.`}</p>\n    <p>{`These tests also expose some data structures that meant to be internal or private —_queue in this case— . We should not use them in production code; therefore we should not use them in tests. Because we are exposing internal representation in tests, it is almost an impossible task refactor the code without changing the testing code.`}</p>\n    <p>{`Stop. Take a breath. Clear your mind. Forget about the previous testing code example. Think about the dispatcher. What is the purpose of the dispatcher? What is it meant to do?`}</p>\n    <p>{`A dispatcher is an object that delivers messages to listeners. When we want to receive a message we add a listener —which is callback function— . Use the method send to notify all listeners of a payload. After the send method, dispatcher invokes all listeners with the payload as an argument.`}</p>\n    <p>{`That was the documentation of the dispatcher. We should write tests just like that documentation:`}</p>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"javascript\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-javascript\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-javascript\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`it`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'delivers messages to listeners'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`,`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`{`}</span>{`\n  dispatcher`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`addListener`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`cb`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n  dispatcher`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`deliver`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'message'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n  `}<span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`expect`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`cb`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`.`}</span><span parentName=\"code\" {...{\n            \"className\": \"token function\"\n          }}>{`toHaveBeenCalledWith`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span><span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'message'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{`\n`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`}`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span></code></pre></div>\n    <p>{`It is simple, clean, easy to understand, it does not use internal representation, and it has 100% of code coverage. If we refactor the dispatcher, as long as the functionality and API are valid, there is no need to change tests. If we want to start using the dispatcher, we make a copy and paste to our new production code. That last point makes these test excellent documentation: they are working examples of usage.`}</p>\n    <h3>{`Conclusion.`}</h3>\n    <p>{`Tests are documentation. We should write them as they were the documentation. Working with tests as they were documentation they create better and more effective testing code. It helps to start writing useful tests and start with TDD. They give a direction to follow.`}</p>\n    <p>{`When we are coding tests we should satisfy the following rules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Start writing a test for each main functionality.`}</li>\n      <li parentName=\"ul\">{`Then their exceptions.`}</li>\n      <li parentName=\"ul\">{`Refactor tests until they are easy to read and understand.`}</li>\n      <li parentName=\"ul\">{`Never use “private” properties in testing code.`}</li>\n      <li parentName=\"ul\">{`Verify that testing code should be copy-pasteable to new production code.`}</li>\n      <li parentName=\"ul\">{`If some functionality works but has no test, do not use it.`}</li>\n      <li parentName=\"ul\">{`Test functionalities, not functions/methods.`}</li>\n      <li parentName=\"ul\">{`Tests should explain what the code does.`}</li>\n    </ul>\n    <p>{`Anything else to read? You might be interested in reading:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@drpicox/the-myth-of-100-of-code-coverage-8d465589a0f8\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`The myth of the 100% code coverage`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/@drpicox/simple-exercise-to-understand-testing-and-refactoring-9b3431afd333\",\n          \"target\": \"_blank\",\n          \"rel\": \"nofollow noopener noreferrer\"\n        }}>{`A quick puzzle to understand testing and refactor`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\"\nimport { MDXProvider } from \"@mdx-js/react\"\nimport Main from \"../components/Main\"\nimport BasicLayout from \"./BasicLayout\"\nimport * as shared from \"../shared\"\n\nexport default function WikiPage({ children, pageContext }) {\n  const { canonical } = pageContext.frontmatter\n\n  return (\n    <BasicLayout {...pageContext.frontmatter}>\n      <MDXProvider components={shared}>\n        <Main>\n          <shared.Container>\n            <h1>{pageContext.frontmatter.title}</h1>\n            {canonical && (\n              <p class=\"small\">\n                <a href={canonical} target=\"_blank\" rel=\"noopener noreferrer\">\n                  This article was originally published outside ⬈\n                </a>\n              </p>\n            )}\n            {children}\n          </shared.Container>\n        </Main>\n      </MDXProvider>\n    </BasicLayout>\n  )\n}\n"],"sourceRoot":""}