{"version":3,"sources":["webpack:///./wiki/Testing.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","className","lang","dir","href","isMDXComponent"],"mappings":"gcAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,wJAEgC,mBAAGC,WAAW,KAAQ,CAClD,KAAQ,iGADoB,qBAFhC,0HAOA,+WAQA,+EACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,sEAAnB,6JAKF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,sCAAnB,oJAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,8CAAnB,sPAKA,0BAAYC,UAAU,iBAAgB,iBAAGC,KAAK,KAAKC,IAAI,OAAjB,iDAAqE,uBAArE,iCAA+G,iBAAGC,KAAK,4EAAR,wBAEvJ,kBAAIJ,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,cAAsC,kBAAIA,WAAW,UAAf,WAAtC,oBAAnB,gHAIF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,kEAAnB,iMAKF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,oBAAnB,yKAGA,0BAAYC,UAAU,iBAAgB,iBAAGC,KAAK,KAAKC,IAAI,OAAjB,qGAAyH,uBAAzH,oCAAsK,iBAAGC,KAAK,gFAAR,uBAOpNR,EAAWS,gBAAiB","file":"component---wiki-testing-mdx-b7ae6f3a92434a2092fe.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Volumes/Projects/drpicox/gatsby-home/src/layouts/WikiLayout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Testing is amazing.\nI cannot figure out how I was able to sleep comfortably before Testing.\nI was great coding, I loved to do `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/drpicox/drpicox.github.io/new/master?filename=_entries/DefensiveCoding.md\"\n      }}>{`[DefensiveCoding]`}</a>{`,\nI was proud of my work, but once I understood Testing,\nI realized that I was not a fraction as good as I am today.`}</p>\n    <p>{`I was a great detractor of Testing.\nI was reading a lot of Testing, I thought that\nI learned a lot about it, but almost everything was\ncontradictory or did not make sense.\nBut one day I realized that it was not my fault,\nneither fault of Testing: almost every\nHow to Test on the internet at that time was awful.\nLuckily it has changed.`}</p>\n    <p>{`If you have to start Testing today I have some advice:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Learning to test properly is as complicated as learing programming`}</strong>{`.\nIt is a new skill that you have to learn.\nBut it is worthy; once you mastered Testing,\nyou will be faster (and safer) with tests that without them.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Testing is your best documentation`}</strong>{`.\nTests should be easy to understand and ready to copy-paste.\nThey have to explain which functionalities your code has, and how to use them. `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Write about functionalities, not functions`}</strong>{`.\nDo not let the word Unit deceive you: you are not testing methods,\nclasses, or modules. You are testing functionalities.\nWrite a test for each possible case, and later,\nin its section, exceptional cases, exception, and regression tests.`}</p>\n        <blockquote className=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Write tests. Not too many. Mostly integration.<br />&mdash; Guillermo Rauch â–² (@rauchg) <a href=\"https://twitter.com/rauchg/status/807626710350839808?ref_src=twsrc%5Etfw\">December 10, 2016</a></p></blockquote>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Never test `}<em parentName=\"strong\">{`private`}</em>{` representations`}</strong>{`.\nNever. You are testing how to use it; if you use internal structures,\nyou will not be able to refactor.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Refactor and refactor your test until it is easy to understand`}</strong>{`.\nDo it in green and as many times as you need.\nDo not be afraid of creating auxiliary code, structures,\nand artifacts to simplify your Testing. Readability and maintainability are key.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Get rid of mocks`}</strong>{`.\nThe only mocks that you need are for the real user, random, time, and external services.\nMocks destroy the confidence in tests and make future refactors harder. `}</p>\n        <blockquote className=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">The more your tests resemble the way your software is used, the more confidence they can give you.<br />&mdash; Kent C. Dodds ðŸ§¢ (@kentcdodds) <a href=\"https://twitter.com/kentcdodds/status/977018512689455106?ref_src=twsrc%5Etfw\">March 23, 2018</a></p></blockquote>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}