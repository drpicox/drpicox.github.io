{"version":3,"sources":["webpack:///./src/components/NavIndex.js","webpack:///./src/components/NavTopics.js","webpack:///./src/layouts/WikiLayout.js","webpack:///./wiki/TheThreeStagesOfTDD.mdx"],"names":["navCss","NavIndex","index","prev","next","css","className","to","NavTopics","replace","WikiPage","children","pageContext","frontmatter","title","BasicLayout","components","shared","Main","name","_frontmatter","Link","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","mdxType","parentName","isMDXComponent"],"mappings":"uMAIA,IAAMA,EAAM,mGAWL,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtC,OACE,8BACGF,GACC,mBAAKG,IAAKL,GACPG,GACC,YAAC,OAAD,CAAMG,UAAU,OAAOC,GAAE,IAAMJ,GAA/B,KAIF,YAAC,OAAD,CAAMG,UAAU,QAAQC,GAAE,IAAML,GAC7BA,GAEFE,GACC,YAAC,OAAD,CAAME,UAAU,OAAOC,GAAE,IAAMH,GAA/B,OCzBZ,IAAMJ,EAAM,mNAmBL,SAASQ,EAAT,GAA2C,IAAtBL,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMF,EAAS,EAATA,MACtC,OAAIA,IAAUC,EAEV,mBAAKE,IAAKL,GACPE,GACC,YAAC,OAAD,CAAMI,UAAU,OAAOC,GAAE,IAAML,GAA/B,WAIDE,GACC,YAAC,OAAD,CAAME,UAAU,OAAOC,GAAE,IAAMH,GAC5BA,EAAKK,QAAQP,EAAO,IADvB,OAQN,mBAAKG,IAAKL,GACPE,GACC,YAAC,OAAD,CAAMI,UAAU,QAAQC,GAAE,IAAML,GAC7BA,GAGJC,GACC,YAAC,OAAD,CAAMG,UAAU,OAAOC,GAAE,IAAMJ,GAA/B,KACKA,EAAKM,QAAQP,EAAO,KAG1BE,GACC,YAAC,OAAD,CAAME,UAAU,OAAOC,GAAE,IAAMH,GAC5BA,EAAKK,QAAQP,EAAO,IADvB,O,gBC7CO,SAASQ,EAAT,GAA8C,IAA1BC,EAAyB,EAAzBA,SAAyB,IAAfC,YACMC,YAAzCC,EADkD,EAClDA,MAAOZ,EAD2C,EAC3CA,MAAOC,EADoC,EACpCA,KAAMC,EAD8B,EAC9BA,KAC5B,OACE,YAACW,EAAA,EAAD,CAAaD,MAAOA,GAClB,YAAC,IAAD,CAAaE,WAAYC,GACvB,YAACC,EAAA,EAAD,KACE,YAACD,EAAA,UAAD,KACE,YAAChB,EAAD,CAAUC,MAAOA,EAAOC,KAAMA,EAAMC,KAAMA,IACzCU,GAAS,sBAAKA,GACdH,EACD,YAACH,EAAD,CAAWN,MAAOA,EAAOC,KAAMA,EAAMC,KAAMA,U,kICRjCe,E,4DAFTC,G,UAAe,IAOtBC,GALgBF,EAKK,OALG,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDZ,EAEC,EAFDA,WACGM,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCN,WAAYA,EAAYa,QAAQ,cAG5E,qBAAG,kBAAIC,WAAW,KAAI,YAACT,EAAD,CAAMd,GAAG,sBAAsBsB,QAAQ,QAAvC,wBAAnB,gLAIH,uBACA,qBAAG,+BAAKC,WAAW,KAAQ,CACvB,IAAO,oCACP,IAAO,oBAEX,8BACA,4EACA,+BAAc,YAACT,EAAD,CAAMd,GAAG,sBAAsBsB,QAAQ,QAAvC,wBAAd,oHAEA,kNAIA,8BACA,4FACA,iJAEA,0QAIA,mSAK6C,YAACR,EAAD,CAAMd,GAAG,iBAAiBsB,QAAQ,QAAlC,mBAL7C,sDAOA,+BACA,2GACA,qPAIA,+XASA,oTAKA,qCACA,oQAQJD,EAAWG,gBAAiB","file":"component---wiki-the-three-stages-of-tdd-mdx-e636ba092c77b2fd391d.js","sourcesContent":["import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { Link } from \"../shared\";\n\nconst navCss = css`\n  margin-bottom: -4.5em;\n\n  .prev {\n    margin-right: 0.3em;\n  }\n  .next {\n    margin-left: 0.3em;\n  }\n`;\n\nexport function NavIndex({ index, prev, next }) {\n  return (\n    <>\n      {index && (\n        <div css={navCss}>\n          {prev && (\n            <Link className=\"prev\" to={`/${prev}`}>\n              «\n            </Link>\n          )}\n          <Link className=\"index\" to={`/${index}`}>\n            {index}\n          </Link>\n          {next && (\n            <Link className=\"next\" to={`/${next}`}>\n              »\n            </Link>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { Link } from \"../shared\";\n\nconst navCss = css`\n  display: grid;\n  grid-template-areas: \"prev index next\";\n  grid-gap: 0.5em;\n\n  .prev {\n    grid-area: prev;\n    text-align: left;\n  }\n  .next {\n    grid-area: next;\n    text-align: right;\n  }\n  .index {\n    grid-area: index;\n    text-align: center;\n  }\n`;\n\nexport function NavTopics({ prev, next, index }) {\n  if (index === prev)\n    return (\n      <div css={navCss}>\n        {index && (\n          <Link className=\"prev\" to={`/${index}`}>\n            ← Index\n          </Link>\n        )}\n        {next && (\n          <Link className=\"next\" to={`/${next}`}>\n            {next.replace(index, \"\")} →\n          </Link>\n        )}\n      </div>\n    );\n\n  return (\n    <div css={navCss}>\n      {index && (\n        <Link className=\"index\" to={`/${index}`}>\n          {index}\n        </Link>\n      )}\n      {prev && (\n        <Link className=\"prev\" to={`/${prev}`}>\n          ← {prev.replace(index, \"\")}\n        </Link>\n      )}\n      {next && (\n        <Link className=\"next\" to={`/${next}`}>\n          {next.replace(index, \"\")} →\n        </Link>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport Main from \"../components/Main\";\nimport { NavIndex } from \"../components/NavIndex\";\nimport { NavTopics } from \"../components/NavTopics\";\nimport * as shared from \"../shared\";\nimport BasicLayout from \"./BasicLayout\";\n\nexport default function WikiPage({ children, pageContext }) {\n  const { title, index, prev, next } = pageContext.frontmatter;\n  return (\n    <BasicLayout title={title}>\n      <MDXProvider components={shared}>\n        <Main>\n          <shared.Container>\n            <NavIndex index={index} prev={prev} next={next} />\n            {title && <h1>{title}</h1>}\n            {children}\n            <NavTopics index={index} prev={prev} next={next} />\n          </shared.Container>\n        </Main>\n      </MDXProvider>\n    </BasicLayout>\n  );\n}\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Volumes/Projects/drpicox/gatsby-home/src/layouts/WikiLayout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p><em parentName=\"p\"><Link to=\"/TheThreeRulesOfTDD\" mdxType=\"Link\">[TheThreeRulesOfTDD]</Link>{` are quite popular,\nbut people usually forgot the three stages of TDD.\nThey represent the stages that a programmer does in one program increment:\nTest, Code, and Clean.`}</em></p>\n    <br />\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/images/testing/stages-of-tdd.png\",\n        \"alt\": \"Stages of TDD\"\n      }}></img></p>\n    <h3>{`Test`}</h3>\n    <p>{`You always start with Test. That is writing tests. `}</p>\n    <p>{`Follow `}<Link to=\"/TheThreeRulesOfTDD\" mdxType=\"Link\">[TheThreeRulesOfTDD]</Link>{` and write the minimum amount of possible Test.\nAs soon as the Test fails, stop and go to the next stage, Code.`}</p>\n    <p>{`If you discover new possible cases while writting,\nyou can either write the name of the test in your notebook\nor either add an empty test as a reminder.\nYou can do this at any stage.`}</p>\n    <h3>{`Code`}</h3>\n    <p>{`Make the test pass by writing the minimal amount of code possible. `}</p>\n    <p>{`You should write code until the Test passes.\nWhen this happens, you should stop writing code and go for the next stage.`}</p>\n    <p>{`If all tests are passing and you are not happy with your code, add more tests.\nMake your tests fail, so they give you an excuse to write more code.\nCycle quickly through TDD stages and write the remaining code\nwhen back to the Code stage.`}</p>\n    <p>{`If you feel that you have to write a large amount of code as a consequence\nof one failing test, stop.\nThat is known as getting stuck in TDD.\nThe solution is simple.\nComment that last test, and try another approach.\nProbably there is a different set of tests and `}<Link to=\"/StairstepTest\" mdxType=\"Link\">[StairstepTest]</Link>{`s that might\nimply small increases over the code.`}</p>\n    <h3>{`Clean`}</h3>\n    <p>{`Clean is commonly known as the Refactor stage. You clean your tests and your code.`}</p>\n    <p>{`Clean code is refactoring it to make the system more readable\nbut without adding any new functionality.\nExtract new functions, create new classes, group conditions, rename variables,\nbut do not introduce new features.`}</p>\n    <p>{`All cleaning must happen in green.\nConsider Clean a small cycle of two stages itself:\n1) clean code, 2) run test,\n1) clean test, 2) run test,\nand start over.\nAt each piece of refactoring, rerun your tests.\nTests must pass at any time during the refactor.\nIf any test fails as a consequence of the refactor,\nundo the refactor and try another approach.`}</p>\n    <p>{`Clean the code but also tests.\nThe quality of the test code is more important than the quality of\nthe production code. Tests must be highly readable and self-explanatory.\nDo not hesitate to create new abstractions, tools, functions, classes,\nto make them more easy to understand.`}</p>\n    <h3>{`Cycle fast!`}</h3>\n    <p>{`Each cycle through all stages should take around 30 seconds up to one minute.\nSome cleaning may get bigger, with more steps;\nyou may need more time to think about tests,\nbut you never should spend too much time in the coding stage.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}