{
  "angular-101-l1": {
    "title": "Angular 101 - L1",
    "subtitle": "The right place to start building your own web apps",
    "tags": [
      "teaching",
      "angular"
    ],
    "date": "2015-07-16T00:00:00.000Z",
    "abstract": "The most difficult part to start with one technology is just that: start. This small article shows the necessary steps to start: how to create a simple web page with angular,  how to start a web server and use it, how to add few nice styles,  and how to create your first angular component. It does not try to explain everything in detail,  it is just a start.\n",
    "snippet": "```html\n<button ng-click=\"vm.sayHello()\">Say hello</button>\n<div>{{vm.hello}}</div>\n```\n",
    "basename": "angular-101-l1",
    "preview": "## Chapter 1: First angular app This is a small example just to see the fundamentals of angular. Follow it step by step and you will the most basic angular app running."
  },
  "angular-provider": {
    "title": "Angular providers",
    "subtitle": "providers, factories, services, values, constants",
    "tags": [
      "teaching",
      "angular"
    ],
    "date": "2015-05-08T00:00:00.000Z",
    "abstract": "One of the most difficult parts to angular newcomers is to understand the concept of factories, services, and the hardest one are provider. Nevertheless they are quite simple and,  surprisingly all them are just sugar syntax to make providers. Provider is the basic tool of angular dependency injection and in this article I show in few examples how are they related.\n",
    "snippet": "```javascript\nfunction Logger() {\n    this.log = function(msg) { console.log(msg); };\n}\n// ..choose..\nmodule.value('Logger', new Logger());\n// ..or..\nmodule.service('Logger', Logger);\n// ..or..\nmodule.factory('Logger', function() { return new Logger(); });\n// ..or..\nmodule.provider('Logger', function() {\n    this.$get = function() { return new Logger(); };\n});\n```\n",
    "basename": "angular-provider",
    "preview": "All this four example does exactly the same, and Yes, almost all components in Angular are providers: values, services, factories, directives... And you didn't noticed, aren't you? ### What the example does? Let's look carefully to the introduction example."
  },
  "drpx-id": {
    "title": "drpx-id: reference your children",
    "subtitle": "Improve connection between your Angular directives",
    "tags": [
      "angular",
      "modules"
    ],
    "date": "2015-04-25T00:00:00.000Z",
    "abstract": "Angular lets you to reference your parent controllers with require: in directive definition, but does not have support to reference children. Here I present a small module that leverages in John Papa styleguide which allows parents to access children components in similar fashion that Angular 2.0 does.\n",
    "snippet": "```html\n<!-- yourComponent.tpl.html -->\n<toggle id=\"theToggle\"></toggle>\n<button ng-click=\"theToggle.toggle()\">Toggle</button>\n<h1 ng-show=\"theToggle.isOpen()\">My Content</h1>\n```\n",
    "source": "https://github.com/drpicox/drpx-id",
    "append": "/drpx-id/README.md",
    "basename": "drpx-id",
    "preview": "<div>   **Test** </div> <div> <edit-on-codepen>   <codepen-button></codepen-button>   <codepen-content key=\"js\" markdown=\"1\"> ```javascript function(){ lo; } ```   </codepen-content>   <codepen-content key=\"html\" markdown=\"1\" class=\"nghide\"> ```html     <script src=\"http://sdfds.fs\">         <hola>Hola</hola> ```   </codepen-content> </edit-on-codepen> </div> ."
  },
  "drpx-transcludeto": {
    "title": "drpx-transcludeto: multi-transclude",
    "subtitle": "Improve your directives modularity",
    "tags": [
      "angular",
      "modules"
    ],
    "date": "2015-05-06T00:00:00.000Z",
    "abstract": "Angular lets you to transclude html templates into your directives, in other words, parametrize a directive with one template. Unfortunately, angular is limited by one single translcussion. Here I present a small module that allows multiple transclussion, it allows you to create directives like lists with custom header items and footers, higly configurable dialogs, ...\n",
    "snippet": "```html\n<list-pager list=\"vm.people\">\n    <h1 target-to=\"header\">People</h1>\n    <person-detail person=\"$container.item\" target-to=\"item\"></person-detail>\n    <div target-to=\"footer\">\n        <button ng-click=\"add()\">Add</button>\n    </div>\n</list-pager>\n```\n",
    "source": "https://github.com/drpicox/drpx-transcludeto",
    "append": "/drpx-transcludeto/README.md",
    "hideTitle": true,
    "basename": "drpx-transcludeto",
    "preview": "."
  },
  "first-ngtags-app": {
    "title": "First ngtags App",
    "subtitle": "Demo case with public source of ngtags",
    "tags": [
      "ngtags",
      "angular",
      "apps"
    ],
    "date": "2015-02-05T00:00:00.000Z",
    "basename": "first-ngtags-app",
    "preview": "[Ngtags](http://ngtags.org) objective is to simplify the creation of [AngularJS](https://angularjs.org) apps. Instead of creating complex _directive_ and _routes_ structure definitions it allows to create them through an `html` like tags self explained and contained."
  },
  "grunt-frontmatter": {
    "title": "grunt-frontmatter: extracting yaml",
    "subtitle": "Automatize metadata extraction in your Grunt process",
    "tags": [
      "grunt",
      "yaml",
      "front-matter"
    ],
    "date": "2015-02-09T00:00:00.000Z",
    "basename": "grunt-frontmatter",
    "preview": "Here I present a new grunt task (yep, another grunt task), the idea of these task is to extract YAML front-matter from files and put them all into one single JSON file. For long time I have been using [grunt-markdown-to-json](https://www.npmjs.com/package/grunt-markdown-to-json) in my developments (two examples: one was this web page, another is [Wenode](http://wenode.barcelonajs.org))."
  },
  "unboxing-di": {
    "title": "Unboxing Dependency Injection",
    "subtitle": "...or how I realised how much work saves automatic dependency injection",
    "tags": [
      "discussion",
      "angular"
    ],
    "date": "2015-05-29T00:00:00.000Z",
    "abstract": "AngularJS dependency injection saves a lot of work, and this feature comes out of the box. Beginners are usually puzzled by this feature, many times misunderstood, but it saves a lot of time and simplifies drastically the maintenance of large applications. Here I show few small examples that illustrate how much work is saved by dependency injection and how it simplifies the maintenance of complex developments.\n",
    "snippet": "```javascript\napp.factory('Customer', function CustomerFactory() { ... });\napp.factory('customersState', function customersStateFactory(Customer,State) { ... });\napp.factory('Product', function ProductFactory() { ... });\napp.factory('productsState', function productsStateFactory(Product,State) { ... });\napp.factory('Cart', function CartFactory(customersState,productsState) { ... });\n// vs\napp.Customer = (function CustomerFactory() { ... })();\napp.customersState = (function customersStateFactory(Customer,State) { ... })(app.Customer,tools.State);\napp.Product = (function ProductFactory() { ... })(Product,State);\napp.productsState = (function productsStateFactory() { ... })(app.Product,tools.State);\napp.Cart = (function CartFactory(customersState,productsState) { ... })(app.customersState,app.productsState);\n```\n",
    "basename": "unboxing-di",
    "preview": "The opening example illustrates a simplified case of an app that has three main types of entities: Customer, Product and Cart. Additionally, it also considers two special _\"controllers\"_ that are supposed to be a kind of dictionary."
  },
  "updateable": {
    "title": "Updateable pattern or flux-for-angular",
    "subtitle": "Clean and safe method to keep computed values up to date",
    "tags": [
      "angular",
      "flux",
      "patterns"
    ],
    "date": "2015-03-02T00:00:00.000Z",
    "preview": "This last year Flux had become highly popular, but how it can be applied to Angular? Here I present an alternative mechanism more in line with Angular philosophy.\n",
    "basename": "updateable"
  }
}