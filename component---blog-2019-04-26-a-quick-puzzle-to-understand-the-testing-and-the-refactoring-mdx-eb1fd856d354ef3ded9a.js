(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"/Ai1":function(e,t,a){"use strict";a.d(t,"a",(function(){return c}));a("q1tI");var s=a("7ljp"),n=a("eC7B"),o=a("m8Tn"),r=a("8rN0"),i=a("qKvR"),l=/\/\/(?:.*\.)?([^.]+\.[^./]+)\//;function c(e){var t=e.children,a=e.pageContext,c=a.frontmatter.canonical;return Object(i.a)(o.a,a.frontmatter,Object(i.a)(s.a,{components:r},Object(i.a)(n.a,null,Object(i.a)(r.Container,null,Object(i.a)("h1",null,a.frontmatter.title),c&&Object(i.a)("p",{class:"small"},Object(i.a)("a",{href:c,target:"_blank",rel:"noopener noreferrer"},"This article was originally published"," ",function(e){var t=e.match(l);return t?"at "+t[1]:"here"}(c)," ⬈")),t))))}},dZYJ:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return l})),a.d(t,"default",(function(){return h}));var s,n=a("wx14"),o=a("zLVn"),r=(a("q1tI"),a("7ljp")),i=a("/Ai1"),l=(a("qKvR"),{}),c=(s="Link",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),Object(r.b)("div",e)}),b={_frontmatter:l},u=i.a;function h(e){var t=e.components,a=Object(o.a)(e,["components"]);return Object(r.b)(u,Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In July of 2015, The New York Times presented a quiz to test the ability for problem-solving of their readers. The idea is straightforward; there is a secret rule that readers have to guess. They present the sequence 2, 4, 8 that obeys one rule and they let them propose new sequences to guess the rule. It turns out that this simple game is amazingly useful to teach testing. Here I explain my last experience teaching introduction to test."),Object(r.b)("h2",null,"Fist is first"),Object(r.b)("p",null,"I always start the introduction to testing with one sentence about testing. This sentence is 50 years old; still, it is impressively accurate and indispensable. It helps to break myths and expectations quite fast."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"“Testing shows the presence, not the absence of bugs”",Object(r.b)("br",{parentName:"p"}),"\n","— Edsger W. Dijkstra, 1969")),Object(r.b)("h2",null,"The Exercise"),Object(r.b)("p",null,"The exercise is to resolve the quiz. I present the sequence 2, 4, 8 and participants propose other sequences and for each, they try to guess which rule is it."),Object(r.b)("p",null,"I write on the board the sequence 2, 4, 8 and a checkmark of success."),Object(r.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(r.b)("pre",Object(n.a)({parentName:"div"},{className:"language-text"}),Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"  a,  b,  c  \n --- --- ---\n  2,  4,  8  ✅"))),Object(r.b)("p",null,"Then I ask to try to guess which rule by proposing three new numbers and hypothesize a new possible rule. The first suggestion, usually always first suggestion each time that I do that game, is 16, 32, 64, and the rule is that each number doubles the previous one."),Object(r.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(r.b)("pre",Object(n.a)({parentName:"div"},{className:"language-text"}),Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"  a,  b,  c  \n --- --- ---\n  2,  4,  8  ✅\n 16, 32, 64  ✅ # doubles the previous one?"))),Object(r.b)("p",null,"It is not that rule. At this moment people usually realize that they have to be more original proposing sequences. Many suggestions and possible rules appear:"),Object(r.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(r.b)("pre",Object(n.a)({parentName:"div"},{className:"language-text"}),Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"  a,  b,  c  \n --- --- ---\n  2,  4,  8  ✅\n 16, 32, 64  ✅ # doubles the previous one?\n 12, 14, 18  ✅ # all pairs?\n  5, 10, 15  ✅ # all positive?"))),Object(r.b)("p",null,"Some times people realize quickly about which rule might be, some times the list gets more extensive. The sooner they understand that new sequences must challenge past rule proposals the sooner the approach to the real one. Numbers 12,14,18 are breaking the doubles rule; numbers 5,10,15 are breaking all pairs rule."),Object(r.b)("p",null,"Sooner o later someone discovers the rule, and they propose a new sequence and the correct rule."),Object(r.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(r.b)("pre",Object(n.a)({parentName:"div"},{className:"language-text"}),Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"  a,  b,  c  \n --- --- ---\n  2,  4,  8  ✅\n 16, 32, 64  ✅ # doubles the previous one?\n 12, 14, 18  ✅ # all pairs?\n  5, 10, 15  ✅ # all positive?\n  1,  2,  3  ✅ # ascending order!"))),Object(r.b)("p",null,"The problem is that some times there are no counterexamples of the rule. Counterexamples give essential information about the problem; it is crucial that the audience realizes that. For that reason, I always use the following trick: ascending order can be a < b < c, or can be a ≤ b ≤ c, which one is the good one? At that moment they realize that they need to find negative cases."),Object(r.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(r.b)("pre",Object(n.a)({parentName:"div"},{className:"language-text"}),Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"  a,  b,  c  \n --- --- ---\n  2,  4,  8  ✅\n 16, 32, 64  ✅ # doubles the previous one?\n 12, 14, 18  ✅ # all pairs?\n  5, 10, 15  ✅ # all positive?\n  1,  2,  3  ✅ # ascending order!\n  1,  1,  1  ❌ # but it might be a <= b < c\n  1,  2,  2  ❌ # or it might be a < b <= c\n  1,  1,  2  ❌ # it completes"))),Object(r.b)("p",null,"With those last three cases, attendants are sure that the right rule is the strict ascending rule. It also creates a lasting memory of the necessity of having failing cases, indispensable to understand TDD."),Object(r.b)("h2",null,"The Refactor"),Object(r.b)("p",null,"Now it is the moment to challenge even more the beliefs of the attendants; it is the moment to open their minds and look for new possibilities."),Object(r.b)("p",null,"Given the exercise solved until this moment, are there more rules that satisfy all of the previous cases? The answer is a resounding yes. There are infinite rules that satisfy all the previous cases."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Some alternative rules that satisfy all previous cases are:"),Object(r.b)("ul",{parentName:"blockquote"},Object(r.b)("li",{parentName:"ul"},"The sum of the numbers must be greater than 5."),Object(r.b)("li",{parentName:"ul"},"The three numbers must be different."),Object(r.b)("li",{parentName:"ul"},"The third number must be three or higher."))),Object(r.b)("p",null,"This possibility of changing the rule while we satisfy at the same time all cases is the essence of refactoring and agile. With essential cases tested all important functionalities are covered. Variations in the behavior of the code are possible if it passes all tests. Tests ensure that everything keeps working as expected."),Object(r.b)("p",null,"At this point, it is easy to refactor the code. Refactor is nothing else than finding another rule that suits better to our objectives. Who knows, perhaps we do not want three numbers in ascending order, maybe what we need is having at least one number higher than two."),Object(r.b)("h2",null,"The Sick Obsession"),Object(r.b)("p",null,"I can listen to your thoughts as I can hear to the complaints from the attendants. Yes, I can change the rule and all cases still passing. It is good."),Object(r.b)("p",null,"Probably you are tempted to add more cases; you want to make sure that there is one and only one rule that satisfies all of them. Do you remember what Dijkstra said? Testing does not show the absence of bugs. So good luck, you need infinite test cases."),Object(r.b)("p",null,"But it is worst, having more tests has many implications:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"There is more testing code to review and maintain."),Object(r.b)("li",{parentName:"ul"},"It is more difficult to understand what the code is trying to do."),Object(r.b)("li",{parentName:"ul"},"The smaller production code changes break tests."),Object(r.b)("li",{parentName:"ul"},"And of course, refactoring is almost impossible.")),Object(r.b)("h2",null,"Final Thoughts"),Object(r.b)("p",null,"Think carefully about your essential cases. Include always counterexamples. Leave room to refactor. And of course, forget the sick obsession of getting rid of all bugs. Creating more and more complex tests does not help."),Object(r.b)("h2",null,"Do it by yourself"),Object(r.b)("p",null,"There is an example of this exercise here:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)(c,{to:"/TestingGuessTheRule",mdxType:"Link"},"[TestingGuessTheRule]"))),Object(r.b)("p",null,"Instead of having one rule, it loads a random rule each time.\nSo you can try to guess which one is it."),Object(r.b)("br",null),Object(r.b)("h3",null,"About the puzzle"),Object(r.b)("p",null,"The puzzle was initially published at ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.nytimes.com/interactive/2015/07/03/upshot/a-quick-puzzle-to-test-your-problem-solving.html?_r=0&abt=0002&abg=0",target:"_blank",rel:"nofollow noopener noreferrer"}),"https://www.nytimes.com/interactive/2015/07/03/upshot/a-quick-puzzle-to-test-your-problem-solving.html?_r=0&abt=0002&abg=0")))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---blog-2019-04-26-a-quick-puzzle-to-understand-the-testing-and-the-refactoring-mdx-eb1fd856d354ef3ded9a.js.map