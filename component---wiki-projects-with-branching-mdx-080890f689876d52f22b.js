(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{"8Joq":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return u}));var a=n("wx14"),o=n("zLVn"),r=(n("q1tI"),n("7ljp")),c=n("WHYo"),i=(n("qKvR"),{}),l={_frontmatter:i},s=c.a;function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)(s,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This article covers how to create branchs in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/drpicox/drpicox.github.io/new/master?filename=_entries/ProjectsWith.md"}),"[ProjectsWith]")," project."),Object(r.b)("p",null,"When many people are collaborating on the same project, we need a way to\ncooperate and avoid conflicts. In repositories like Git, we need a strategy to\nwork with everyone together."),Object(r.b)("p",null,"In this assignment, we use a development based on the root branch (called\nmaster), but all changes are committed to other feature branches."),Object(r.b)("p",null,"This is the overview of the branches:"),Object(r.b)("div",{className:"gatsby-highlight","data-language":"text"},Object(r.b)("pre",Object(a.a)({parentName:"div"},{className:"language-text"}),Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"  master\no------------------------[]----···\n \\                       / PR\n  \\                     /\n   \\ feature/10_title  /\n    ---o---o----o------"))),Object(r.b)("h2",null,"New branch"),Object(r.b)("p",null,"You have to create a branch when you start to develop one issue. Create it\nalways from the master. The branch name must follow this naming:\n",Object(r.b)("code",Object(a.a)({parentName:"p"},{className:"language-text"}),"feature/${issue_number}_${issue_title}"),"."),Object(r.b)("p",null,"Work and frequently commit to that branch. Because each one of you is working on\na single issue, there should be no new commits from other authors in that\nbranch."),Object(r.b)("p",null,"Push the branch regularly to the GitHub repository. It would make a good backup\nof your work."),Object(r.b)("h2",null,"PR: Pull Request"),Object(r.b)("p",null,"Once you have finished implementing your issue, make sure that you have\ncommitted everything, push your branch to GitHub."),Object(r.b)("p",null,"Enter into your project in GitHub, push the button to create a new Pull Request.\nThe Pull Request is from your branch towards the master branch."),Object(r.b)("p",null,"Create the Pull Request and write the description. The description text must\ncontain the following text: ",Object(r.b)("code",Object(a.a)({parentName:"p"},{className:"language-text"}),"Implements #${issue_numer}"),'. Example: "Implements\n#10". You also can add some details.'),Object(r.b)("p",null,"Review your commit, look to your changes. If you find anything that you want to\nimprove or fix, do it, commit it, and push again. The Pull Request will reflect\nall changes. When it looks good, mode your Issue card in the Board to Review."),Object(r.b)("p",null,"Before the daily, review all of your Pull Requests and resolve all the comments\nthat you might have."),Object(r.b)("h2",null,"Conflicts!"),Object(r.b)("p",null,"Conflicts appear when someone else merges a code that changes the same parts\nthat you have changed."),Object(r.b)("p",null,"If your Pull Request conflicts with the master branch, you must solve it. GitHub\nwill report that and will prevent the Pull Request to finish."),Object(r.b)("p",null,"Go to your code, open the repository, fetch all new commits. Be sure that you\nbring the changes to the master branch."),Object(r.b)("p",null,"Merge the branch master —with the changes— to your branch, solve the conflicts,\nand push it again to GitHub. If you did it ok, the conflict message of GitHub\nwould disappear from the Pull Request."),Object(r.b)("p",null,"Notify it to your team members."))}u.isMDXComponent=!0},WHYo:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var a=n("q1tI"),o=n.n(a),r=n("7ljp"),c=n("eC7B"),i=n("qKvR"),l=n("8rN0");var s={name:"1dj59mw",styles:"margin-bottom:-4.5em;.prev{margin-right:0.3em;}.next{margin-left:0.3em;}"};function u(e){var t=e.index,n=e.prev,a=e.next;return Object(i.a)(o.a.Fragment,null,t&&Object(i.a)("div",{css:s},n&&Object(i.a)(l.Link,{className:"prev",to:"/"+n},"«"),Object(i.a)(l.Link,{className:"index",to:"/"+t},t),a&&Object(i.a)(l.Link,{className:"next",to:"/"+a},"»")))}var b={name:"ix6qzk",styles:'display:grid;grid-template-areas:"prev index next";grid-gap:0.5em;.prev{grid-area:prev;text-align:left;}.next{grid-area:next;text-align:right;}.index{grid-area:index;text-align:center;}'};function h(e){var t=e.prev,n=e.next,a=e.index;return a===t?Object(i.a)("div",{css:b},a&&Object(i.a)(l.Link,{className:"prev",to:"/"+a},"← Index"),n&&Object(i.a)(l.Link,{className:"next",to:"/"+n},n.replace(a,"")," →")):Object(i.a)("div",{css:b},a&&Object(i.a)(l.Link,{className:"index",to:"/"+a},a),t&&Object(i.a)(l.Link,{className:"prev",to:"/"+t},"← ",t.replace(a,"")),n&&Object(i.a)(l.Link,{className:"next",to:"/"+n},n.replace(a,"")," →"))}var m=n("m8Tn");function p(e){var t=e.children,n=e.pageContext.frontmatter,a=n.title,o=n.index,s=n.prev,b=n.next;return Object(i.a)(m.a,{title:a},Object(i.a)(r.a,{components:l},Object(i.a)(c.a,null,Object(i.a)(l.Container,null,Object(i.a)(u,{index:o,prev:s,next:b}),a&&Object(i.a)("h1",null,a),t,Object(i.a)(h,{index:o,prev:s,next:b})))))}}}]);
//# sourceMappingURL=component---wiki-projects-with-branching-mdx-080890f689876d52f22b.js.map