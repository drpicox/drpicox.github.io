{"version":3,"sources":["webpack:///./wiki/WaterfallVsAgile.mdx","webpack:///./src/components/NavIndex.js","webpack:///./src/components/NavTopics.js","webpack:///./src/layouts/WikiLayout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","navCss","NavIndex","index","prev","next","css","className","to","NavTopics","replace","WikiPage","children","pageContext","frontmatter","title","BasicLayout","shared","Main"],"mappings":"0PAQaA,G,UAAe,IACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,wYAKA,sBACE,kBAAIC,WAAW,MAAf,oHAEA,kBAAIA,WAAW,MAAf,+JAEA,kBAAIA,WAAW,MAAf,sFAEA,kBAAIA,WAAW,MAAf,iTAKF,8CACA,qBAAG,+BAAKA,WAAW,KAAQ,CACvB,IAAO,kCACP,IAAO,oBAEX,+PAGA,sBACE,kBAAIA,WAAW,MAAf,qGAEA,kBAAIA,WAAW,MAAf,uHAEA,kBAAIA,WAAW,MAAf,mNAGA,kBAAIA,WAAW,MAAf,+KAIF,uZAKA,qBAAG,+BAAKA,WAAW,KAAQ,CACvB,IAAO,8BACP,IAAO,qBAMfJ,EAAWK,gBAAiB,G,6IClE5B,IAAMC,EAAM,mGAWL,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACtC,OACE,8BACGF,GACC,mBAAKG,IAAKL,GACPG,GACC,YAAC,OAAD,CAAMG,UAAU,OAAOC,GAAE,IAAMJ,GAA/B,KAIF,YAAC,OAAD,CAAMG,UAAU,QAAQC,GAAE,IAAML,GAC7BA,GAEFE,GACC,YAAC,OAAD,CAAME,UAAU,OAAOC,GAAE,IAAMH,GAA/B,OCzBZ,IAAMJ,EAAM,mNAmBL,SAASQ,EAAT,GAA2C,IAAtBL,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMF,EAAS,EAATA,MACtC,OAAIA,IAAUC,EAEV,mBAAKE,IAAKL,GACPE,GACC,YAAC,OAAD,CAAMI,UAAU,OAAOC,GAAE,IAAML,GAA/B,WAIDE,GACC,YAAC,OAAD,CAAME,UAAU,OAAOC,GAAE,IAAMH,GAC5BA,EAAKK,QAAQP,EAAO,IADvB,OAQN,mBAAKG,IAAKL,GACPE,GACC,YAAC,OAAD,CAAMI,UAAU,QAAQC,GAAE,IAAML,GAC7BA,GAGJC,GACC,YAAC,OAAD,CAAMG,UAAU,OAAOC,GAAE,IAAMJ,GAA/B,KACKA,EAAKM,QAAQP,EAAO,KAG1BE,GACC,YAAC,OAAD,CAAME,UAAU,OAAOC,GAAE,IAAMH,GAC5BA,EAAKK,QAAQP,EAAO,IADvB,O,gBC7CO,SAASQ,EAAT,GAA8C,IAA1BC,EAAyB,EAAzBA,SAAyB,IAAfC,YACMC,YAAzCC,EADkD,EAClDA,MAAOZ,EAD2C,EAC3CA,MAAOC,EADoC,EACpCA,KAAMC,EAD8B,EAC9BA,KAC5B,OACE,YAACW,EAAA,EAAD,CAAaD,MAAOA,GAClB,YAAC,IAAD,CAAanB,WAAYqB,GACvB,YAACC,EAAA,EAAD,KACE,YAACD,EAAA,UAAD,KACE,YAACf,EAAD,CAAUC,MAAOA,EAAOC,KAAMA,EAAMC,KAAMA,IACzCU,GAAS,sBAAKA,GACdH,EACD,YAACH,EAAD,CAAWN,MAAOA,EAAOC,KAAMA,EAAMC,KAAMA","file":"component---wiki-waterfall-vs-agile-mdx-25f5f3503cfc609d0c7e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Volumes/Projects/drpicox/david-rodenas.com/src/layouts/WikiLayout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Waterfall was defined in 1970 by Winston Royce as a way to improve how the\nsoftware were developed. Royce's vision was simple: copy the same strategies\nthat worked so well in the industry previously. He envisioned the software\ndevelopment as a factory in which there was a product, documents, moving down\nthrough different stages. It was, in great simplification:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Start with requirements: to define the final result, the first stage is\ncapturing precisely those requirements.`}</li>\n      <li parentName=\"ol\">{`Create the designs: once you know what to do, then you can capture all those\nrequirements in a precise design able to accommodate all the functionalities.`}</li>\n      <li parentName=\"ol\">{`Implement the code: this stage is following the instructions and create the\ncode.`}</li>\n      <li parentName=\"ol\">{`Verification: before releasing the product, get the requirements and get the\ndesign, and verify that the code and the resulting product satisfies with the\nrequirements. Each stage had its dedicated roles and specialized\nprofessionals, and each stage has a result of some document or specification.`}</li>\n    </ol>\n    <p>{`This is the overview:`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/images/waterfall/waterfall.png\",\n        \"alt\": \"Stages of TDD\"\n      }}></img></p>\n    <p>{`Agile turned out to be the opposite. In Agile we assume that we do not know the\nfinal result that we want before begin, it relays in quick adaptation and\nmethodical research to know that the product is the correct one. In Agile:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`We begin with an idea: from this idea we write the tests, first in human\nlanguage, then in code.`}</li>\n      <li parentName=\"ol\">{`We start to iterate and create the code: while we create the code of the\ntests, we also create the implementation.`}</li>\n      <li parentName=\"ol\">{`Then it comes the design: the design is created after the code, we refactor\nto change the code and adapt it to the best design, at each moment. We do it\ncontinuously as part of the red-green-refactor loop.`}</li>\n      <li parentName=\"ol\">{`We run the experiment: because we cannot be sure that the product is the\ncorrect one, we use it to run an experiment in the market, so we can see that\neverything works.`}</li>\n    </ol>\n    <p>{`Agile does not assume a required set of skills for each step, or neither we use\nthe test to verify the final result. The objective of the Agile is getting the\nbest value for each iteration, and for that, we need iterations to be as short\nas possible. We keep the red-green-refactor loop under 30 seconds, but we want\nto keep the requirement definition loop as short as possible.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/images/waterfall/agile.png\",\n        \"alt\": \"Stages of TDD\"\n      }}></img></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { Link } from \"../shared\";\n\nconst navCss = css`\n  margin-bottom: -4.5em;\n\n  .prev {\n    margin-right: 0.3em;\n  }\n  .next {\n    margin-left: 0.3em;\n  }\n`;\n\nexport function NavIndex({ index, prev, next }) {\n  return (\n    <>\n      {index && (\n        <div css={navCss}>\n          {prev && (\n            <Link className=\"prev\" to={`/${prev}`}>\n              «\n            </Link>\n          )}\n          <Link className=\"index\" to={`/${index}`}>\n            {index}\n          </Link>\n          {next && (\n            <Link className=\"next\" to={`/${next}`}>\n              »\n            </Link>\n          )}\n        </div>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { Link } from \"../shared\";\n\nconst navCss = css`\n  display: grid;\n  grid-template-areas: \"prev index next\";\n  grid-gap: 0.5em;\n\n  .prev {\n    grid-area: prev;\n    text-align: left;\n  }\n  .next {\n    grid-area: next;\n    text-align: right;\n  }\n  .index {\n    grid-area: index;\n    text-align: center;\n  }\n`;\n\nexport function NavTopics({ prev, next, index }) {\n  if (index === prev)\n    return (\n      <div css={navCss}>\n        {index && (\n          <Link className=\"prev\" to={`/${index}`}>\n            ← Index\n          </Link>\n        )}\n        {next && (\n          <Link className=\"next\" to={`/${next}`}>\n            {next.replace(index, \"\")} →\n          </Link>\n        )}\n      </div>\n    );\n\n  return (\n    <div css={navCss}>\n      {index && (\n        <Link className=\"index\" to={`/${index}`}>\n          {index}\n        </Link>\n      )}\n      {prev && (\n        <Link className=\"prev\" to={`/${prev}`}>\n          ← {prev.replace(index, \"\")}\n        </Link>\n      )}\n      {next && (\n        <Link className=\"next\" to={`/${next}`}>\n          {next.replace(index, \"\")} →\n        </Link>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { MDXProvider } from \"@mdx-js/react\";\nimport Main from \"../components/Main\";\nimport { NavIndex } from \"../components/NavIndex\";\nimport { NavTopics } from \"../components/NavTopics\";\nimport * as shared from \"../shared\";\nimport BasicLayout from \"./BasicLayout\";\n\nexport default function WikiPage({ children, pageContext }) {\n  const { title, index, prev, next } = pageContext.frontmatter;\n  return (\n    <BasicLayout title={title}>\n      <MDXProvider components={shared}>\n        <Main>\n          <shared.Container>\n            <NavIndex index={index} prev={prev} next={next} />\n            {title && <h1>{title}</h1>}\n            {children}\n            <NavTopics index={index} prev={prev} next={next} />\n          </shared.Container>\n        </Main>\n      </MDXProvider>\n    </BasicLayout>\n  );\n}\n"],"sourceRoot":""}